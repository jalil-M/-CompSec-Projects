Questions

Question A: What does the OpenSSL switch -CAcreateserial do?
--> the OpenSSL switch "-CAcreateserial" does create a serial number file (extension .srl) if it does not exist. This switch is used as a command for x509 certificates. 

Question B: How can you tell keytool to generate a CSR for an X.509 version 3 client certificate (atstep 4), or tell OpenSSL to force generation of a version 3 certificate (at step 5)?
--> In order to generate a CSR for an X.509 version 3 client certificate, we use the command "-certreq" with the file name, alias and keystore name. This command generates a CSR using the PKCS #10 format. Moreover, in order to force openssl to generate a version 3 certificate, we need to specify an extension file with the command "-extfile v3.ext" and the file looks like this :
" authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment "

Question C: What are extensions and what can they contain?
--> Certificate extensions provide a way of adding information such as alternative subject names and usage restrictions to certificates. An x509 v3 certificate contains an extension field where we can specify the following : a name, an arbitrary OID (object identifier) number, a value, and a "critical" modifier.

Question D: Is it possible to just make a copy of the client-side truststore,why or why not?
--> It is not possible to just copy the client-side truststore because every time we generate a truststore, we need to confirm that it is trusted in the terminal : the client has already a trusted root certificate.

Question E: What is the purpose of each password?  That is, what does each password protect?
-->The passwords for the truststores are used to protect the integrity of the truststores. if we don't provide any store password, we can still read the contents of the truststores or keystores.
For the same reason, we provide one password for each of the keystores (client and server sides). Additionally, we provide one password for each of the client-side's and server-side's keystores, so that it protects the private key of the generated keypair when we used the command "-genkeypair".
To conclude, 2 passwords protect respectively the client-side's and server-side's truststores, 2 passwords protect the client-side's and server-side's keystores (or certificate chains), and finally 2 passwords in the client and server for protecting the end-user keypairs. In total, we have 6 protection passwords. 

Question F: What does the serveranswer?

Question G: What is the purpose ofsetNeedClientAuth(true)in the server?

Question H: Show  printouts,  written  directly  in  your  submission  email,  from  both  server  andclient (we know that this is not really a question, but you get the point).
